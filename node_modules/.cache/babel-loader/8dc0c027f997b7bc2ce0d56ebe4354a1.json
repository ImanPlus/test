{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { isValidElement, Children, cloneElement, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { sanitizeListRestProps } from 'ra-core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport classnames from 'classnames';\nimport DatagridHeaderCell from './DatagridHeaderCell';\nimport DatagridLoading from './DatagridLoading';\nimport DatagridBody, { PureDatagridBody } from './DatagridBody';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    table: {\n      tableLayout: 'auto'\n    },\n    thead: {},\n    tbody: {},\n    headerRow: {},\n    headerCell: {\n      position: 'sticky',\n      top: 0,\n      zIndex: 2,\n      backgroundColor: theme.palette.background.paper\n    },\n    checkbox: {},\n    row: {},\n    clickableRow: {\n      cursor: 'pointer'\n    },\n    rowEven: {},\n    rowOdd: {},\n    rowCell: {},\n    expandHeader: {\n      padding: 0,\n      width: theme.spacing(6)\n    },\n    expandIconCell: {\n      width: theme.spacing(6)\n    },\n    expandIcon: {\n      padding: theme.spacing(1),\n      transform: 'rotate(-90deg)',\n      transition: theme.transitions.create('transform', {\n        duration: theme.transitions.duration.shortest\n      })\n    },\n    expanded: {\n      transform: 'rotate(0deg)'\n    }\n  };\n}, {\n  name: 'RaDatagrid'\n});\n/**\n * The Datagrid component renders a list of records as a table.\n * It is usually used as a child of the <List> and <ReferenceManyField> components.\n *\n * Props:\n *  - rowStyle\n *\n * @example Display all posts as a datagrid\n * const postRowStyle = (record, index) => ({\n *     backgroundColor: record.nb_views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = (props) => (\n *     <List {...props}>\n *         <Datagrid rowStyle={postRowStyle}>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"body\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n */\n\nfunction Datagrid(_a) {\n  var classesOverride = _a.classes,\n      props = __rest(_a, [\"classes\"]);\n\n  var classes = useStyles({\n    classes: classesOverride\n  });\n\n  var basePath = props.basePath,\n      _b = props.optimized,\n      optimized = _b === void 0 ? false : _b,\n      _c = props.body,\n      body = _c === void 0 ? optimized ? React.createElement(PureDatagridBody, null) : React.createElement(DatagridBody, null) : _c,\n      children = props.children,\n      className = props.className,\n      currentSort = props.currentSort,\n      data = props.data,\n      expand = props.expand,\n      hasBulkActions = props.hasBulkActions,\n      hover = props.hover,\n      ids = props.ids,\n      loading = props.loading,\n      loaded = props.loaded,\n      onSelect = props.onSelect,\n      onToggleItem = props.onToggleItem,\n      resource = props.resource,\n      rowClick = props.rowClick,\n      rowStyle = props.rowStyle,\n      selectedIds = props.selectedIds,\n      setSort = props.setSort,\n      _d = props.size,\n      size = _d === void 0 ? 'small' : _d,\n      total = props.total,\n      isRowSelectable = props.isRowSelectable,\n      version = props.version,\n      rest = __rest(props, [\"basePath\", \"optimized\", \"body\", \"children\", \"className\", \"currentSort\", \"data\", \"expand\", \"hasBulkActions\", \"hover\", \"ids\", \"loading\", \"loaded\", \"onSelect\", \"onToggleItem\", \"resource\", \"rowClick\", \"rowStyle\", \"selectedIds\", \"setSort\", \"size\", \"total\", \"isRowSelectable\", \"version\"]);\n\n  var updateSort = useCallback(function (event) {\n    event.stopPropagation();\n    setSort(event.currentTarget.dataset.sort);\n  }, [setSort]);\n  var handleSelectAll = useCallback(function (event) {\n    if (event.target.checked) {\n      var all_1 = ids.concat(selectedIds.filter(function (id) {\n        return !ids.includes(id);\n      }));\n      onSelect(isRowSelectable ? all_1.filter(function (id) {\n        return isRowSelectable(data[id]);\n      }) : all_1);\n    } else {\n      onSelect([]);\n    }\n  }, [data, ids, onSelect, isRowSelectable, selectedIds]);\n  /**\n   * if loaded is false, the list displays for the first time, and the dataProvider hasn't answered yet\n   * if loaded is true, the data for the list has at least been returned once by the dataProvider\n   * if loaded is undefined, the Datagrid parent doesn't track loading state (e.g. ReferenceArrayField)\n   */\n\n  if (loaded === false) {\n    return React.createElement(DatagridLoading, {\n      classes: classes,\n      className: className,\n      expand: expand,\n      hasBulkActions: hasBulkActions,\n      nbChildren: React.Children.count(children),\n      size: size\n    });\n  }\n  /**\n   * Once loaded, the data for the list may be empty. Instead of\n   * displaying the table header with zero data rows,\n   * the datagrid displays nothing in this case.\n   */\n\n\n  if (loaded && (ids.length === 0 || total === 0)) {\n    return null;\n  }\n\n  var all = isRowSelectable ? ids.filter(function (id) {\n    return isRowSelectable(data[id]);\n  }) : ids;\n  /**\n   * After the initial load, if the data for the list isn't empty,\n   * and even if the data is refreshing (e.g. after a filter change),\n   * the datagrid displays the current data.\n   */\n\n  return React.createElement(Table, __assign({\n    className: classnames(classes.table, className),\n    size: size\n  }, sanitizeListRestProps(rest)), React.createElement(TableHead, {\n    className: classes.thead\n  }, React.createElement(TableRow, {\n    className: classnames(classes.row, classes.headerRow)\n  }, expand && React.createElement(TableCell, {\n    padding: \"none\",\n    className: classnames(classes.headerCell, classes.expandHeader)\n  }), hasBulkActions && React.createElement(TableCell, {\n    padding: \"checkbox\",\n    className: classes.headerCell\n  }, React.createElement(Checkbox, {\n    className: \"select-all\",\n    color: \"primary\",\n    checked: selectedIds.length > 0 && all.length > 0 && all.every(function (id) {\n      return selectedIds.includes(id);\n    }),\n    onChange: handleSelectAll\n  })), Children.map(children, function (field, index) {\n    return isValidElement(field) ? React.createElement(DatagridHeaderCell, {\n      className: classes.headerCell,\n      currentSort: currentSort,\n      field: field,\n      isSorting: currentSort.field === (field.props.sortBy || field.props.source),\n      key: field.props.source || index,\n      resource: resource,\n      updateSort: updateSort\n    }) : null;\n  }))), cloneElement(body, {\n    basePath: basePath,\n    className: classes.tbody,\n    classes: classes,\n    expand: expand,\n    rowClick: rowClick,\n    data: data,\n    hasBulkActions: hasBulkActions,\n    hover: hover,\n    ids: ids,\n    onToggleItem: onToggleItem,\n    resource: resource,\n    rowStyle: rowStyle,\n    selectedIds: selectedIds,\n    isRowSelectable: isRowSelectable,\n    version: version\n  }, children));\n}\n\nDatagrid.propTypes = {\n  basePath: PropTypes.string,\n  body: PropTypes.element,\n  children: PropTypes.node.isRequired,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  currentSort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  data: PropTypes.object.isRequired,\n  expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  hasBulkActions: PropTypes.bool.isRequired,\n  hover: PropTypes.bool,\n  ids: PropTypes.arrayOf(PropTypes.any).isRequired,\n  loading: PropTypes.bool,\n  onSelect: PropTypes.func,\n  onToggleItem: PropTypes.func,\n  resource: PropTypes.string,\n  rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  rowStyle: PropTypes.func,\n  selectedIds: PropTypes.arrayOf(PropTypes.any).isRequired,\n  setSort: PropTypes.func,\n  total: PropTypes.number,\n  version: PropTypes.number,\n  isRowSelectable: PropTypes.func\n};\nDatagrid.defaultProps = {\n  data: {},\n  hasBulkActions: false,\n  ids: [],\n  selectedIds: []\n};\nexport default Datagrid;","map":{"version":3,"sources":["E:/Top Learn/My Project/ReactJs Course/admin/node_modules/ra-ui-materialui/esm/list/Datagrid.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","isValidElement","Children","cloneElement","useCallback","PropTypes","sanitizeListRestProps","makeStyles","Table","TableCell","TableHead","TableRow","Checkbox","classnames","DatagridHeaderCell","DatagridLoading","DatagridBody","PureDatagridBody","useStyles","theme","table","tableLayout","thead","tbody","headerRow","headerCell","position","top","zIndex","backgroundColor","palette","background","paper","checkbox","row","clickableRow","cursor","rowEven","rowOdd","rowCell","expandHeader","padding","width","spacing","expandIconCell","expandIcon","transform","transition","transitions","create","duration","shortest","expanded","name","Datagrid","_a","classesOverride","classes","props","basePath","_b","optimized","_c","body","createElement","children","className","currentSort","data","expand","hasBulkActions","hover","ids","loading","loaded","onSelect","onToggleItem","resource","rowClick","rowStyle","selectedIds","setSort","_d","size","total","isRowSelectable","version","rest","updateSort","event","stopPropagation","currentTarget","dataset","sort","handleSelectAll","target","checked","all_1","concat","filter","id","includes","nbChildren","count","all","color","every","onChange","map","field","index","isSorting","sortBy","source","key","propTypes","string","element","node","isRequired","object","shape","order","oneOfType","elementType","bool","arrayOf","any","func","number","defaultProps"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { isValidElement, Children, cloneElement, useCallback, } from 'react';\nimport PropTypes from 'prop-types';\nimport { sanitizeListRestProps } from 'ra-core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport classnames from 'classnames';\nimport DatagridHeaderCell from './DatagridHeaderCell';\nimport DatagridLoading from './DatagridLoading';\nimport DatagridBody, { PureDatagridBody } from './DatagridBody';\nvar useStyles = makeStyles(function (theme) { return ({\n    table: {\n        tableLayout: 'auto',\n    },\n    thead: {},\n    tbody: {},\n    headerRow: {},\n    headerCell: {\n        position: 'sticky',\n        top: 0,\n        zIndex: 2,\n        backgroundColor: theme.palette.background.paper,\n    },\n    checkbox: {},\n    row: {},\n    clickableRow: {\n        cursor: 'pointer',\n    },\n    rowEven: {},\n    rowOdd: {},\n    rowCell: {},\n    expandHeader: {\n        padding: 0,\n        width: theme.spacing(6),\n    },\n    expandIconCell: {\n        width: theme.spacing(6),\n    },\n    expandIcon: {\n        padding: theme.spacing(1),\n        transform: 'rotate(-90deg)',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expanded: {\n        transform: 'rotate(0deg)',\n    },\n}); }, { name: 'RaDatagrid' });\n/**\n * The Datagrid component renders a list of records as a table.\n * It is usually used as a child of the <List> and <ReferenceManyField> components.\n *\n * Props:\n *  - rowStyle\n *\n * @example Display all posts as a datagrid\n * const postRowStyle = (record, index) => ({\n *     backgroundColor: record.nb_views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = (props) => (\n *     <List {...props}>\n *         <Datagrid rowStyle={postRowStyle}>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"body\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n */\nfunction Datagrid(_a) {\n    var classesOverride = _a.classes, props = __rest(_a, [\"classes\"]);\n    var classes = useStyles({ classes: classesOverride });\n    var basePath = props.basePath, _b = props.optimized, optimized = _b === void 0 ? false : _b, _c = props.body, body = _c === void 0 ? optimized ? React.createElement(PureDatagridBody, null) : React.createElement(DatagridBody, null) : _c, children = props.children, className = props.className, currentSort = props.currentSort, data = props.data, expand = props.expand, hasBulkActions = props.hasBulkActions, hover = props.hover, ids = props.ids, loading = props.loading, loaded = props.loaded, onSelect = props.onSelect, onToggleItem = props.onToggleItem, resource = props.resource, rowClick = props.rowClick, rowStyle = props.rowStyle, selectedIds = props.selectedIds, setSort = props.setSort, _d = props.size, size = _d === void 0 ? 'small' : _d, total = props.total, isRowSelectable = props.isRowSelectable, version = props.version, rest = __rest(props, [\"basePath\", \"optimized\", \"body\", \"children\", \"className\", \"currentSort\", \"data\", \"expand\", \"hasBulkActions\", \"hover\", \"ids\", \"loading\", \"loaded\", \"onSelect\", \"onToggleItem\", \"resource\", \"rowClick\", \"rowStyle\", \"selectedIds\", \"setSort\", \"size\", \"total\", \"isRowSelectable\", \"version\"]);\n    var updateSort = useCallback(function (event) {\n        event.stopPropagation();\n        setSort(event.currentTarget.dataset.sort);\n    }, [setSort]);\n    var handleSelectAll = useCallback(function (event) {\n        if (event.target.checked) {\n            var all_1 = ids.concat(selectedIds.filter(function (id) { return !ids.includes(id); }));\n            onSelect(isRowSelectable\n                ? all_1.filter(function (id) { return isRowSelectable(data[id]); })\n                : all_1);\n        }\n        else {\n            onSelect([]);\n        }\n    }, [data, ids, onSelect, isRowSelectable, selectedIds]);\n    /**\n     * if loaded is false, the list displays for the first time, and the dataProvider hasn't answered yet\n     * if loaded is true, the data for the list has at least been returned once by the dataProvider\n     * if loaded is undefined, the Datagrid parent doesn't track loading state (e.g. ReferenceArrayField)\n     */\n    if (loaded === false) {\n        return (React.createElement(DatagridLoading, { classes: classes, className: className, expand: expand, hasBulkActions: hasBulkActions, nbChildren: React.Children.count(children), size: size }));\n    }\n    /**\n     * Once loaded, the data for the list may be empty. Instead of\n     * displaying the table header with zero data rows,\n     * the datagrid displays nothing in this case.\n     */\n    if (loaded && (ids.length === 0 || total === 0)) {\n        return null;\n    }\n    var all = isRowSelectable\n        ? ids.filter(function (id) { return isRowSelectable(data[id]); })\n        : ids;\n    /**\n     * After the initial load, if the data for the list isn't empty,\n     * and even if the data is refreshing (e.g. after a filter change),\n     * the datagrid displays the current data.\n     */\n    return (React.createElement(Table, __assign({ className: classnames(classes.table, className), size: size }, sanitizeListRestProps(rest)),\n        React.createElement(TableHead, { className: classes.thead },\n            React.createElement(TableRow, { className: classnames(classes.row, classes.headerRow) },\n                expand && (React.createElement(TableCell, { padding: \"none\", className: classnames(classes.headerCell, classes.expandHeader) })),\n                hasBulkActions && (React.createElement(TableCell, { padding: \"checkbox\", className: classes.headerCell },\n                    React.createElement(Checkbox, { className: \"select-all\", color: \"primary\", checked: selectedIds.length > 0 &&\n                            all.length > 0 &&\n                            all.every(function (id) { return selectedIds.includes(id); }), onChange: handleSelectAll }))),\n                Children.map(children, function (field, index) {\n                    return isValidElement(field) ? (React.createElement(DatagridHeaderCell, { className: classes.headerCell, currentSort: currentSort, field: field, isSorting: currentSort.field ===\n                            (field.props.sortBy || field.props.source), key: field.props.source || index, resource: resource, updateSort: updateSort })) : null;\n                }))),\n        cloneElement(body, {\n            basePath: basePath,\n            className: classes.tbody,\n            classes: classes,\n            expand: expand,\n            rowClick: rowClick,\n            data: data,\n            hasBulkActions: hasBulkActions,\n            hover: hover,\n            ids: ids,\n            onToggleItem: onToggleItem,\n            resource: resource,\n            rowStyle: rowStyle,\n            selectedIds: selectedIds,\n            isRowSelectable: isRowSelectable,\n            version: version,\n        }, children)));\n}\nDatagrid.propTypes = {\n    basePath: PropTypes.string,\n    body: PropTypes.element,\n    children: PropTypes.node.isRequired,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    currentSort: PropTypes.shape({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    data: PropTypes.object.isRequired,\n    expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    hasBulkActions: PropTypes.bool.isRequired,\n    hover: PropTypes.bool,\n    ids: PropTypes.arrayOf(PropTypes.any).isRequired,\n    loading: PropTypes.bool,\n    onSelect: PropTypes.func,\n    onToggleItem: PropTypes.func,\n    resource: PropTypes.string,\n    rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    rowStyle: PropTypes.func,\n    selectedIds: PropTypes.arrayOf(PropTypes.any).isRequired,\n    setSort: PropTypes.func,\n    total: PropTypes.number,\n    version: PropTypes.number,\n    isRowSelectable: PropTypes.func,\n};\nDatagrid.defaultProps = {\n    data: {},\n    hasBulkActions: false,\n    ids: [],\n    selectedIds: [],\n};\nexport default Datagrid;\n"]},"metadata":{},"sourceType":"module"}